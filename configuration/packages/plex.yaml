automation:
  - alias: Plex Webhook
    initial_state: 'on'
    trigger:
      platform: webhook
      webhook_id: !secret plex_webhook
    action:
     - service: mqtt.publish
       data_template:
         topic: 'plex/update'
         payload_template: >
           {{ (trigger.data['payload'] | string)[12:][:-2] | replace ("\\\\", "\\") | replace ("\\\'", "'") | replace ("\\x","?") }}
  #   - service: notify.slackbot
  #     data_template:
  #       message: >
  #        Original: {{ (trigger.data['payload'] | string)[12:][:-2]| replace ("\\\\", "\\") | replace ("\\\'", "'") | replace ("\\x","?")}}

  - alias: Plex Office
    initial_state: 'on'
    trigger:
      platform: mqtt
      topic: 'plex/update'
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{trigger.payload_json.Player.title == 'dar-pc-01'}}"
        - condition: template        
          value_template: "{{trigger.payload_json.event != 'media.scrobble'}}"          
        - condition: template
          value_template: "{{trigger.payload_json.event != 'media.rate'}}"                    
    action:
      - service: mqtt.publish
        data_template:
          topic: 'plex/update/office'
          retain: true
          payload_template: >
           {  "Event":"{{ trigger.payload_json.event }}", 
              "Account":"{{ trigger.payload_json.Account.title }}", 
              "Title":"{{ trigger.payload_json.Metadata.grandparentTitle }}", 
              "Type":"{{ trigger.payload_json.Metadata.librarySectionType }}", 
              "Image":"{{ trigger.payload_json.Metadata.thumb }}" }

  - alias: Plex Lounge
    initial_state: 'on'
    trigger:
      platform: mqtt
      topic: 'plex/update'
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{trigger.payload_json.Player.title == 'SHIELD Android TV'}}"
        - condition: template        
          value_template: "{{trigger.payload_json.event != 'media.scrobble'}}"          
        - condition: template
          value_template: "{{trigger.payload_json.event != 'media.rate'}}"                    
    action:
      - service: mqtt.publish
        data_template:
          topic: 'plex/update/lounge'
          retain: true
          payload_template: >
           {  "Event":"{{ trigger.payload_json.event }}", 
              "Account":"{{ trigger.payload_json.Account.title }}", 
              "Title":"{{ trigger.payload_json.Metadata.grandparentTitle }}", 
              "Type":"{{ trigger.payload_json.Metadata.librarySectionType }}", 
              "Image":"{{ trigger.payload_json.Metadata.thumb }}" }

sensor:
  - platform: mqtt
    name: "Office Plex"
    state_topic: "plex/update/office"    
    value_template: '{{ value_json.Event == "media.resume" or value_json.Event == "media.play" }}'  
    json_attributes:
      - Account
      - Title
      - Type
      - Image
      - Event
    
  - platform: mqtt
    name: "Lounge Plex"
    state_topic: "plex/update/lounge"    
    value_template: '{{ value_json.Event == "media.resume" or value_json.Event == "media.play" }}'  
    json_attributes:
      - Account
      - Title
      - Type
      - Image
      - Event
        
    

#  - alias: Plex Webhook As Json
#    initial_state: 'on'
#    trigger:
#      platform: mqtt
#      topic: 'plex/update'
#    action:
#      - service: script.process_plex_message
#        data_template:
#          event: "{{ trigger.payload_json.event }}"
#          player: "{{ trigger.payload_json.Player.title }}"
#          account: "{{ trigger.payload_json.Account.title }}"
          
          
#script:
#  process_plex_message:
#    sequence:
#      - service: notify.slackbot
#        data_template:    
#          message: "Plex event: {{ event }} - {{ account }} - {{ player }}"

